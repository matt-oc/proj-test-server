"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DetachVerifiedAccessTrustProviderResultFilterSensitiveLog = exports.DescribeVpnConnectionsResultFilterSensitiveLog = exports.DescribeVerifiedAccessTrustProvidersResultFilterSensitiveLog = exports.IpamResourceType = exports.IpamPublicAddressAwsService = exports.IpamPublicAddressAssociationStatus = exports.IpamPublicAddressType = exports.IpamDiscoveryFailureCode = exports.IpamAddressHistoryResourceType = exports.IpamOverlapStatus = exports.IpamComplianceStatus = exports.PartitionLoadFrequency = exports.UnlimitedSupportedInstanceFamily = exports.ClientCertificateRevocationListStatusCode = exports.ImageBlockPublicAccessEnabledState = exports.TransitGatewayPropagationState = exports.SnapshotBlockPublicAccessState = exports.ImageBlockPublicAccessDisabledState = exports.VpcAttributeName = exports.VolumeStatusInfoStatus = exports.VolumeStatusName = exports.VolumeModificationState = exports.VolumeAttributeName = exports.VerifiedAccessLogDeliveryStatusCode = void 0;
const models_0_1 = require("./models_0");
const models_2_1 = require("./models_2");
exports.VerifiedAccessLogDeliveryStatusCode = {
    FAILED: "failed",
    SUCCESS: "success",
};
exports.VolumeAttributeName = {
    autoEnableIO: "autoEnableIO",
    productCodes: "productCodes",
};
exports.VolumeModificationState = {
    completed: "completed",
    failed: "failed",
    modifying: "modifying",
    optimizing: "optimizing",
};
exports.VolumeStatusName = {
    io_enabled: "io-enabled",
    io_performance: "io-performance",
};
exports.VolumeStatusInfoStatus = {
    impaired: "impaired",
    insufficient_data: "insufficient-data",
    ok: "ok",
};
exports.VpcAttributeName = {
    enableDnsHostnames: "enableDnsHostnames",
    enableDnsSupport: "enableDnsSupport",
    enableNetworkAddressUsageMetrics: "enableNetworkAddressUsageMetrics",
};
exports.ImageBlockPublicAccessDisabledState = {
    unblocked: "unblocked",
};
exports.SnapshotBlockPublicAccessState = {
    block_all_sharing: "block-all-sharing",
    block_new_sharing: "block-new-sharing",
    unblocked: "unblocked",
};
exports.TransitGatewayPropagationState = {
    disabled: "disabled",
    disabling: "disabling",
    enabled: "enabled",
    enabling: "enabling",
};
exports.ImageBlockPublicAccessEnabledState = {
    block_new_sharing: "block-new-sharing",
};
exports.ClientCertificateRevocationListStatusCode = {
    active: "active",
    pending: "pending",
};
exports.UnlimitedSupportedInstanceFamily = {
    t2: "t2",
    t3: "t3",
    t3a: "t3a",
    t4g: "t4g",
};
exports.PartitionLoadFrequency = {
    DAILY: "daily",
    MONTHLY: "monthly",
    NONE: "none",
    WEEKLY: "weekly",
};
exports.IpamComplianceStatus = {
    compliant: "compliant",
    ignored: "ignored",
    noncompliant: "noncompliant",
    unmanaged: "unmanaged",
};
exports.IpamOverlapStatus = {
    ignored: "ignored",
    nonoverlapping: "nonoverlapping",
    overlapping: "overlapping",
};
exports.IpamAddressHistoryResourceType = {
    eip: "eip",
    instance: "instance",
    network_interface: "network-interface",
    subnet: "subnet",
    vpc: "vpc",
};
exports.IpamDiscoveryFailureCode = {
    assume_role_failure: "assume-role-failure",
    throttling_failure: "throttling-failure",
    unauthorized_failure: "unauthorized-failure",
};
exports.IpamPublicAddressType = {
    AMAZON_OWNED_EIP: "amazon-owned-eip",
    BYOIP: "byoip",
    EC2_PUBLIC_IP: "ec2-public-ip",
    SERVICE_MANAGED_BYOIP: "service-managed-byoip",
    SERVICE_MANAGED_IP: "service-managed-ip",
};
exports.IpamPublicAddressAssociationStatus = {
    ASSOCIATED: "associated",
    DISASSOCIATED: "disassociated",
};
exports.IpamPublicAddressAwsService = {
    AGA: "global-accelerator",
    DMS: "database-migration-service",
    EC2_LB: "load-balancer",
    ECS: "elastic-container-service",
    NAT_GATEWAY: "nat-gateway",
    OTHER: "other",
    RDS: "relational-database-service",
    REDSHIFT: "redshift",
    S2S_VPN: "site-to-site-vpn",
};
exports.IpamResourceType = {
    eip: "eip",
    eni: "eni",
    ipv6_pool: "ipv6-pool",
    public_ipv4_pool: "public-ipv4-pool",
    subnet: "subnet",
    vpc: "vpc",
};
const DescribeVerifiedAccessTrustProvidersResultFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.VerifiedAccessTrustProviders && {
        VerifiedAccessTrustProviders: obj.VerifiedAccessTrustProviders.map((item) => (0, models_0_1.VerifiedAccessTrustProviderFilterSensitiveLog)(item)),
    }),
});
exports.DescribeVerifiedAccessTrustProvidersResultFilterSensitiveLog = DescribeVerifiedAccessTrustProvidersResultFilterSensitiveLog;
const DescribeVpnConnectionsResultFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.VpnConnections && {
        VpnConnections: obj.VpnConnections.map((item) => (0, models_2_1.VpnConnectionFilterSensitiveLog)(item)),
    }),
});
exports.DescribeVpnConnectionsResultFilterSensitiveLog = DescribeVpnConnectionsResultFilterSensitiveLog;
const DetachVerifiedAccessTrustProviderResultFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.VerifiedAccessTrustProvider && {
        VerifiedAccessTrustProvider: (0, models_0_1.VerifiedAccessTrustProviderFilterSensitiveLog)(obj.VerifiedAccessTrustProvider),
    }),
});
exports.DetachVerifiedAccessTrustProviderResultFilterSensitiveLog = DetachVerifiedAccessTrustProviderResultFilterSensitiveLog;
